{"version":3,"sources":["../../app-src/util/ConnectionFactory.js"],"names":["stores","connection","ConnectionFactory","constructor","Error","getConnection","Promise","resolve","reject","openRequest","indexedDB","open","onupgradeneeded","e","_createStores","target","result","onsuccess","close","bind","onerror","console","log","error","name","forEach","store","objectStoreNames","contains","deleteObjectStore","createObjectStore","autoIncrement","closeConnection"],"mappings":";;;;;;AAAA,kBAAMA,SAAS,CAAC,aAAD,CAAf;AACA,gBAAIC,aAAa,IAAjB;;gBAEaC,iB,GAAN,MAAMA,iBAAN,CAAwB;AAC3BC,8BAAc;AACV,0BAAM,IAAIC,KAAJ,CAAU,+CAAV,CAAN;AACH;AACD,uBAAOC,aAAP,GAAuB;AACnB,2BAAO,IAAIC,OAAJ,CAAY,CAACC,OAAD,EAAUC,MAAV,KAAqB;AACpC,4BAAGP,UAAH,EAAe,OAAOM,QAAQN,UAAR,CAAP;AACf,8BAAMQ,cAAcC,UAAUC,IAAV,CAAe,cAAf,EAA+B,CAA/B,CAApB;AACAF,oCAAYG,eAAZ,GAA8BC,KAAK;AAC/BX,8CAAkBY,aAAlB,CAAgCD,EAAEE,MAAF,CAASC,MAAzC;AACH,yBAFD;AAGAP,oCAAYQ,SAAZ,GAAwBJ,KAAK;AACzBZ,yCAAaY,EAAEE,MAAF,CAASC,MAAtB;AACA,gCAAIE,QAAQjB,WAAWiB,KAAX,CAAiBC,IAAjB,CAAsBlB,UAAtB,CAAZ;AACAA,uCAAWiB,KAAX,GAAmB,MAAM;AACrB,sCAAM,IAAId,KAAJ,CAAU,6CAAV,CAAN;AACH,6BAFD;AAGAG,oCAAQM,EAAEE,MAAF,CAASC,MAAjB;AACH,yBAPD;AAQAP,oCAAYW,OAAZ,GAAsBP,KAAK;AACvBQ,oCAAQC,GAAR,CAAYT,EAAEE,MAAF,CAASQ,KAArB;AACAf,mCAAOK,EAAEE,MAAF,CAASQ,KAAT,CAAeC,IAAtB;AACH,yBAHD;AAIH,qBAlBM,CAAP;AAmBH;AACD,uBAAOV,aAAP,CAAqBb,UAArB,EAAiC;AAC7BD,2BAAOyB,OAAP,CAAeC,SAAS;AACpB,4BAAGzB,WAAW0B,gBAAX,CAA4BC,QAA5B,CAAqCF,KAArC,CAAH,EACAzB,WAAW4B,iBAAX,CAA6BH,KAA7B;AACAzB,mCAAW6B,iBAAX,CAA6BJ,KAA7B,EAAoC,EAACK,eAAe,IAAhB,EAApC;AACH,qBAJD;AAKH;AACD,uBAAOC,eAAP,GAAyB;AACrB,wBAAG/B,UAAH,EAAe;AACXiB;AACH;AACJ;AApC0B,a","file":"ConnectionFactory.js","sourcesContent":["const stores = ['negociacoes'];\nlet connection = null;\n\nexport class ConnectionFactory {\n    constructor() {\n        throw new Error('Não é possível criar instâncias dessa classe.');\n    }\n    static getConnection() {\n        return new Promise((resolve, reject) => {\n            if(connection) return resolve(connection);\n            const openRequest = indexedDB.open('jscangaceiro', 2);\n            openRequest.onupgradeneeded = e => {\n                ConnectionFactory._createStores(e.target.result);\n            };\n            openRequest.onsuccess = e => {\n                connection = e.target.result;\n                let close = connection.close.bind(connection);\n                connection.close = () => {\n                    throw new Error('Você não pode fechar diretamente a conexão!');\n                }\n                resolve(e.target.result)\n            };\n            openRequest.onerror = e => {\n                console.log(e.target.error);\n                reject(e.target.error.name)\n            };\n        });\n    }\n    static _createStores(connection) {\n        stores.forEach(store => {\n            if(connection.objectStoreNames.contains(store))\n            connection.deleteObjectStore(store);\n            connection.createObjectStore(store, {autoIncrement: true});\n        });\n    }\n    static closeConnection() {\n        if(connection) {\n            close();\n        }\n    }\n}\n"]}